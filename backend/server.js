/**
 * –ì–ª–∞–≤–Ω—ã–π —Ñ–∞–π–ª Express —Å–µ—Ä–≤–µ—Ä–∞
 * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç API –∑–∞–ø—Ä–æ—Å—ã –æ—Ç frontend
 */
import dotenv from 'dotenv'
import express from 'express'
import cors from 'cors'
import { sendToTelegram, testTelegramConnection } from './services/telegram.js'
import { sendEmail, testEmailConnection } from './services/email.js'

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env —Ñ–∞–π–ª–∞
dotenv.config()

// –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ Express
const app = express()
const PORT = process.env.PORT || 3000

// ===== MIDDLEWARE =====

// CORS - —Ä–∞–∑—Ä–µ—à–∞–µ–º –∑–∞–ø—Ä–æ—Å—ã —Å frontend
app.use(cors({
  origin: process.env.NODE_ENV === 'production' 
    ? 'https://your-domain.github.io' 
    : 'http://localhost:5173', // Vite dev server
  credentials: true
}))

// –ü–∞—Ä—Å–∏–Ω–≥ JSON —Ç–µ–ª–∞ –∑–∞–ø—Ä–æ—Å–∞
app.use(express.json())

// –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ development —Ä–µ–∂–∏–º–µ
if (process.env.NODE_ENV !== 'production') {
  app.use((req, res, next) => {
    console.log(`üì• ${req.method} ${req.url}`)
    next()
  })
}

// ===== ROUTES (–≠–Ω–¥–ø–æ–π–Ω—Ç—ã) =====

/**
 * Health check endpoint
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ API
 */
app.get('/api/health', (req, res) => {
  res.json({
    status: 'ok',
    message: 'Backend —Ä–∞–±–æ—Ç–∞–µ—Ç!',
    timestamp: new Date().toISOString()
  })
})

/**
 * Endpoint –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–∫–∞–∑–æ–≤
 * POST /api/order
 */
app.post('/api/order', async (req, res) => {
  try {
    const { name, phone, address, comment } = req.body
    
    // –í–∞–ª–∏–¥–∞—Ü–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
    if (!name || !phone || !address) {
      return res.status(400).json({
        success: false,
        error: '–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è: –∏–º—è, —Ç–µ–ª–µ—Ñ–æ–Ω, –∞–¥—Ä–µ—Å'
      })
    }
    
    // –ë–∞–∑–æ–≤–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –∏–º–µ–Ω–∏ (–º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞)
    if (name.trim().length < 2) {
      return res.status(400).json({
        success: false,
        error: '–ò–º—è –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞'
      })
    }
    
    // –í–∞–ª–∏–¥–∞—Ü–∏—è —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (—Ö–æ—Ç—è –±—ã 10 —Ü–∏—Ñ—Ä)
    const phoneDigits = phone.replace(/\D/g, '')
    if (phoneDigits.length < 10) {
      return res.status(400).json({
        success: false,
        error: '–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞'
      })
    }
    
    // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞
    const orderData = {
      name: name.trim(),
      phone: phone.trim(),
      address: address.trim(),
      comment: comment ? comment.trim() : ''
    }
    
    // –õ–æ–≥–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞
    console.log('üì¶ –ù–æ–≤—ã–π –∑–∞–∫–∞–∑ –ø–æ–ª—É—á–µ–Ω:', {
      name: orderData.name,
      phone: orderData.phone,
      timestamp: new Date().toLocaleString('ru-RU')
    })
    
    // –ú–∞—Å—Å–∏–≤ –ø—Ä–æ–º–∏—Å–æ–≤ –¥–ª—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
    const promises = []
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Telegram (–µ—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω)
    if (process.env.TELEGRAM_BOT_TOKEN && process.env.TELEGRAM_CHAT_ID) {
      promises.push(
        sendToTelegram(orderData).catch(error => {
          console.error('‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram:', error.message)
          return { service: 'telegram', error: error.message }
        })
      )
    }
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ Email (–µ—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω)
    if (process.env.EMAIL_USER && process.env.EMAIL_PASSWORD) {
      promises.push(
        sendEmail(orderData).catch(error => {
          console.error('‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ Email:', error.message)
          return { service: 'email', error: error.message }
        })
      )
    }
    
    // –ñ–¥–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –≤—Å–µ—Ö –æ—Ç–ø—Ä–∞–≤–æ–∫
    const results = await Promise.all(promises)
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –æ—à–∏–±–∫–∏
    const errors = results.filter(r => r && r.error)
    
    if (errors.length === results.length && results.length > 0) {
      // –í—Å–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–æ–≤–∞–ª–∏–ª–∏—Å—å
      return res.status(500).json({
        success: false,
        error: '–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.'
      })
    }
    
    // –£—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç
    res.status(200).json({
      success: true,
      message: '–ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞! –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.',
      orderId: Date.now() // –í—Ä–µ–º–µ–Ω–Ω—ã–π ID –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    })
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–∫–∞–∑–∞:', error)
    
    res.status(500).json({
      success: false,
      error: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.'
    })
  }
})

// ===== ERROR HANDLING =====

// 404 - Route –Ω–µ –Ω–∞–π–¥–µ–Ω
app.use((req, res) => {
  res.status(404).json({
    success: false,
    error: 'API endpoint –Ω–µ –Ω–∞–π–¥–µ–Ω'
  })
})

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–±—â–∏—Ö –æ—à–∏–±–æ–∫
app.use((error, req, res, next) => {
  console.error('üí• –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞:', error)
  
  res.status(500).json({
    success: false,
    error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'
  })
})

// ===== –ó–ê–ü–£–°–ö –°–ï–†–í–ï–†–ê =====

app.listen(PORT, async () => {
  console.log(`\n${'='.repeat(50)}`)
  console.log(`üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://localhost:${PORT}`)
  console.log(`üìÖ ${new Date().toLocaleString('ru-RU')}`)
  console.log(`üåç –û–∫—Ä—É–∂–µ–Ω–∏–µ: ${process.env.NODE_ENV || 'development'}`)
  console.log('='.repeat(50))
  
  // –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
  console.log('\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π...\n')
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º Telegram
  if (process.env.TELEGRAM_BOT_TOKEN) {
    await testTelegramConnection()
  } else {
    console.log('‚ö†Ô∏è  Telegram –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω F(TELEGRAM_BOT_TOKEN –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç)')
  }
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º Email
  if (process.env.EMAIL_USER && process.env.EMAIL_PASSWORD) {
    await testEmailConnection()
  } else {
    console.log('‚ö†Ô∏è  Email –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω (EMAIL_USER –∏–ª–∏ EMAIL_PASSWORD –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç)')
  }
  
  console.log(`\n‚úÖ –°–µ—Ä–≤–µ—Ä –≥–æ—Ç–æ–≤ –ø—Ä–∏–Ω–∏–º–∞—Ç—å –∑–∞–ø—Ä–æ—Å—ã!\n`)
})

// –û–±—Ä–∞–±–æ—Ç–∫–∞ graceful shutdown
process.on('SIGTERM', () => {
  console.log('\nüëã –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª SIGTERM, –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...')
  process.exit(0)
})

process.on('SIGINT', () => {
  console.log('\nüëã –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª SIGINT, –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...')
  process.exit(0)
})
