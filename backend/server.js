import dotenv from 'dotenv'
dotenv.config()

import express from 'express'
import cors from 'cors'
import { sendToTelegram, testTelegramConnection } from './services/telegram.js'

const app = express()
const PORT = process.env.PORT || 3000

app.use(cors({
  origin: process.env.NODE_ENV === 'production' 
    ? 'https://your-domain.github.io' 
    : 'http://localhost:5173',
  credentials: true
}))

app.use(express.json())

if (process.env.NODE_ENV !== 'production') {
  app.use((req, res, next) => {
    console.log(`üì• ${req.method} ${req.url}`)
    next()
  })
}

app.get('/api/health', (req, res) => {
  res.json({
    status: 'ok',
    message: 'Backend —Ä–∞–±–æ—Ç–∞–µ—Ç!',
    timestamp: new Date().toISOString()
  })
})

app.post('/api/order', async (req, res) => {
  try {
    const { name, email, phone, address, comment } = req.body
    if (!name || !email || !phone || !address) {
      return res.status(400).json({
        success: false,
        error: '–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è'
      })
    }
    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/
    if (!emailRegex.test(email)) {
      return res.status(400).json({
        success: false,
        error: '–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email –∞–¥—Ä–µ—Å'
      })
    }

    const orderData = {
      name: name.trim(),
      email: email.trim().toLowerCase(),
      phone: phone.trim(),
      address: address.trim(),
      comment: comment ? comment.trim() : ''
    }

    console.log('üì¶ –ù–æ–≤—ã–π –∑–∞–∫–∞–∑ –¥–ª—è Telegram:', {
      name: orderData.name,
      email: orderData.email,
      phone: orderData.phone
    })

    // –¢–û–õ–¨–ö–û –û–¢–ü–†–ê–í–ö–ê –í TELEGRAM
    await sendToTelegram(orderData)

    res.status(200).json({
      success: true,
      message: '–ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞! –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.',
      orderId: Date.now()
    })

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–∫–∞–∑–∞:', error)
    res.status(500).json({
      success: false,
      error: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.'
    })
  }
})

app.use((req, res) => {
  res.status(404).json({
    success: false,
    error: 'API endpoint –Ω–µ –Ω–∞–π–¥–µ–Ω'
  })
})

// –ú–æ–∂–Ω–æ –æ—Å—Ç–∞–≤–∏—Ç—å, —á—Ç–æ–±—ã —É–±–µ–¥–∏—Ç—å—Å—è –≤ —Ä–∞–±–æ—Ç–µ Telegram –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
app.listen(PORT, async () => {
  console.log(`\n${'='.repeat(50)}`)
  console.log(`üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://localhost:${PORT}`)
  console.log('='.repeat(50))
  if (process.env.TELEGRAM_BOT_TOKEN) {
    await testTelegramConnection()
  } else {
    console.log('‚ö†Ô∏è  Telegram –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω (TELEGRAM_BOT_TOKEN –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç)')
  }
})
