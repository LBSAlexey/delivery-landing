/**
 * –ú–æ–¥—É–ª—å –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ email —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç Nodemailer —Å Gmail SMTP
 */

import nodemailer from 'nodemailer'

/**
 * –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
 */
const EMAIL_USER = process.env.EMAIL_USER
const EMAIL_PASSWORD = process.env.EMAIL_PASSWORD
const EMAIL_TO = process.env.EMAIL_TO

/**
 * –°–æ–∑–¥–∞–µ–º —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ email
 * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–ª—è Gmail SMTP —Å–µ—Ä–≤–µ—Ä–∞
 */
const createTransporter = () => {
  // –í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–∞–ª–∏—á–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
  if (!EMAIL_USER || !EMAIL_PASSWORD) {
    console.warn('‚ö†Ô∏è EMAIL_USER –∏–ª–∏ EMAIL_PASSWORD –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã')
    return null
  }
  
  return nodemailer.createTransport({
    service: 'gmail',
    auth: {
      user: EMAIL_USER,
      pass: EMAIL_PASSWORD // App Password, –ù–ï –æ–±—ã—á–Ω—ã–π –ø–∞—Ä–æ–ª—å!
    },
    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏
    pool: true, // –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø—É–ª —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
    maxConnections: 5,
    maxMessages: 100,
    secure: true // –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å TLS
  })
}

/**
 * HTML —à–∞–±–ª–æ–Ω –ø–∏—Å—å–º–∞ —Å –∑–∞–∫–∞–∑–æ–º
 * 
 * @param {Object} orderData - –î–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞
 * @returns {string} - HTML —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø–∏—Å—å–º–∞
 */
const generateEmailTemplate = (orderData) => {
  const { name, phone, address, comment } = orderData
  const timestamp = new Date().toLocaleString('ru-RU', { 
    timeZone: 'Europe/Moscow' 
  })
  
  return `
<!DOCTYPE html>
<html>
<head>
  <meta charset="UTF-8">
  <style>
    body {
      font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Arial, sans-serif;
      line-height: 1.6;
      color: #333;
      max-width: 600px;
      margin: 0 auto;
      padding: 20px;
    }
    .container {
      background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
      padding: 30px;
      border-radius: 10px;
    }
    .content {
      background: white;
      padding: 30px;
      border-radius: 8px;
    }
    .header {
      background: #667eea;
      color: white;
      padding: 20px;
      border-radius: 8px 8px 0 0;
      margin: -30px -30px 20px -30px;
    }
    .header h1 {
      margin: 0;
      font-size: 24px;
    }
    .info-row {
      padding: 12px;
      border-bottom: 1px solid #e5e7eb;
      display: flex;
    }
    .info-row:last-child {
      border-bottom: none;
    }
    .label {
      font-weight: 600;
      width: 120px;
      color: #667eea;
    }
    .value {
      flex: 1;
      color: #333;
    }
    .footer {
      text-align: center;
      color: #6b7280;
      font-size: 14px;
      margin-top: 20px;
      padding-top: 20px;
      border-top: 1px solid #e5e7eb;
    }
    .timestamp {
      background: #f3f4f6;
      padding: 10px;
      border-radius: 6px;
      text-align: center;
      color: #6b7280;
      font-size: 14px;
      margin-top: 15px;
    }
  </style>
</head>
<body>
  <div class="container">
    <div class="content">
      <div class="header">
        <h1>üöÄ –ù–æ–≤—ã–π –∑–∞–∫–∞–∑ –Ω–∞ –¥–æ—Å—Ç–∞–≤–∫—É</h1>
      </div>
      
      <div class="info-row">
        <span class="label">üë§ –ò–º—è:</span>
        <span class="value">${name}</span>
      </div>
      
      <div class="info-row">
        <span class="label">üìû –¢–µ–ª–µ—Ñ–æ–Ω:</span>
        <span class="value"><a href="tel:${phone}">${phone}</a></span>
      </div>
      
      <div class="info-row">
        <span class="label">üìç –ê–¥—Ä–µ—Å:</span>
        <span class="value">${address}</span>
      </div>
      
      ${comment ? `
      <div class="info-row">
        <span class="label">üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:</span>
        <span class="value">${comment}</span>
      </div>
      ` : ''}
      
      <div class="timestamp">
        üïê –í—Ä–µ–º—è –ø–æ–ª—É—á–µ–Ω–∏—è: ${timestamp}
      </div>
      
      <div class="footer">
        <p><strong>–°–≤—è–∂–∏—Ç–µ—Å—å —Å –∫–ª–∏–µ–Ω—Ç–æ–º –∫–∞–∫ –º–æ–∂–Ω–æ —Å–∫–æ—Ä–µ–µ!</strong></p>
        <p>–≠—Ç–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç —Å–∏—Å—Ç–µ–º—ã Delivery Landing</p>
      </div>
    </div>
  </div>
</body>
</html>
  `.trim()
}

/**
 * –¢–µ–∫—Å—Ç–æ–≤–∞—è –≤–µ—Ä—Å–∏—è –ø–∏—Å—å–º–∞ (fallback –¥–ª—è email –∫–ª–∏–µ–Ω—Ç–æ–≤ –±–µ–∑ HTML)
 * 
 * @param {Object} orderData - –î–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞
 * @returns {string} - –¢–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
 */
const generateTextTemplate = (orderData) => {
  const { name, phone, address, comment } = orderData
  const timestamp = new Date().toLocaleString('ru-RU', { 
    timeZone: 'Europe/Moscow' 
  })
  
  return `
–ù–û–í–´–ô –ó–ê–ö–ê–ó –ù–ê –î–û–°–¢–ê–í–ö–£

–ò–º—è: ${name}
–¢–µ–ª–µ—Ñ–æ–Ω: ${phone}
–ê–¥—Ä–µ—Å: ${address}
${comment ? `–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: ${comment}` : ''}

–í—Ä–µ–º—è –ø–æ–ª—É—á–µ–Ω–∏—è: ${timestamp}

–°–≤—è–∂–∏—Ç–µ—Å—å —Å –∫–ª–∏–µ–Ω—Ç–æ–º –∫–∞–∫ –º–æ–∂–Ω–æ —Å–∫–æ—Ä–µ–µ!

---
–≠—Ç–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç —Å–∏—Å—Ç–µ–º—ã Delivery Landing
  `.trim()
}

/**
 * –û—Ç–ø—Ä–∞–≤–∫–∞ email —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
 * 
 * @param {Object} orderData - –î–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞
 * @throws {Error} - –í—ã–±—Ä–∞—Å—ã–≤–∞–µ—Ç –æ—à–∏–±–∫—É –ø—Ä–∏ –ø—Ä–æ–±–ª–µ–º–∞—Ö —Å –æ—Ç–ø—Ä–∞–≤–∫–æ–π
 */
export const sendEmail = async (orderData) => {
  try {
    // –°–æ–∑–¥–∞–µ–º —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç
    const transporter = createTransporter()
    
    if (!transporter) {
      throw new Error('Email —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ EMAIL_USER –∏ EMAIL_PASSWORD.')
    }
    
    if (!EMAIL_TO) {
      throw new Error('EMAIL_TO –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ .env —Ñ–∞–π–ª–µ')
    }
    
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–∏—Å—å–º–∞
    const mailOptions = {
      from: {
        name: 'Delivery Service',
        address: EMAIL_USER
      },
      to: EMAIL_TO,
      subject: `üÜï –ù–æ–≤—ã–π –∑–∞–∫–∞–∑ –æ—Ç ${orderData.name}`,
      html: generateEmailTemplate(orderData),
      text: generateTextTemplate(orderData),
      priority: 'high', // –í—ã—Å–æ–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
      headers: {
        'X-Priority': '1',
        'X-MSMail-Priority': 'High',
        'Importance': 'high'
      }
    }
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–∏—Å—å–º–æ
    const info = await transporter.sendMail(mailOptions)
    
    console.log('‚úÖ Email –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω:', {
      messageId: info.messageId,
      to: EMAIL_TO,
      accepted: info.accepted
    })
    
    return info
    
  } catch (error) {
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
    console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ email:', error.message)
    
    if (error.code === 'EAUTH') {
      throw new Error('–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ Gmail. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ EMAIL_USER –∏ EMAIL_PASSWORD (–∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ App Password)')
    } else if (error.code === 'ESOCKET') {
      throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Gmail SMTP —Å–µ—Ä–≤–µ—Ä—É')
    } else if (error.responseCode === 550) {
      throw new Error('–ù–µ–≤–µ—Ä–Ω—ã–π email –∞–¥—Ä–µ—Å –ø–æ–ª—É—á–∞—Ç–µ–ª—è')
    } else {
      throw new Error(`–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ email: ${error.message}`)
    }
  }
}

/**
 * –¢–µ—Å—Ç–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ SMTP
 */
export const testEmailConnection = async () => {
  try {
    const transporter = createTransporter()
    
    if (!transporter) {
      console.warn('‚ö†Ô∏è Email —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω')
      return false
    }
    
    await transporter.verify()
    console.log('‚úÖ Email SMTP –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ')
    return true
  } catch (error) {
    console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Email SMTP:', error.message)
    return false
  }
}
